---
- name: Create temp k8s object storage directory
  file:
    state: directory
    path: "{{ _appmigration_exported_resources_dir }}/{{ _appmigration_name }}"
  register: tmpdir

- name: Lookup All Secrets 
  set_fact:
    current_secrets: "{{ lookup('k8s', api_versions='v1', kind='Secret', namespace=_appmigration_namespace) }}"

- name: Save Secrets into temp dir
  shell: kubectl get secret {{ item.metadata.name }} -n {{ _appmigration_namespace }} --export -o yaml > {{ tmpdir.path }}/{{ item.metadata.name }}-secret.yml
  with_items:
    - "{{ current_secrets }}"
  when:
    - current_secrets | length > 0
    - "'default' not in item.metadata.name"
    - "'deployer' not in item.metadata.name"
    - "'builder' not in item.metadata.name"
    - "'-token-' not in item.metadata.name"
    - "'-dockercfg-' not in item.metadata.name"
  register: saved_secrets

- name: Lookup All ServiceAccounts 
  set_fact:
    current_sas: "{{ lookup('k8s', api_versions='v1', kind='ServiceAccount', namespace=_appmigration_namespace) }}"

- name: Save ServiceAccounts into temp dir
  shell: kubectl get serviceAccount {{ item.metadata.name }} -n {{ _appmigration_namespace }} --export -o yaml > {{ tmpdir.path }}/{{ item.metadata.name }}-sa.yml
  with_items:
    - "{{ current_sas }}"
  when:
    - "'default' not in item.metadata.name"
    - "'deployer' not in item.metadata.name"
    - "'builder' not in item.metadata.name"
  register: saved_sas

- name: Lookup All ConfigMaps 
  set_fact:
    current_cms: "{{ lookup('k8s', api_versions='v1', kind='ConfigMap', namespace=_appmigration_namespace) }}"

- name: Save ConfigMaps into temp dir
  shell: kubectl get ConfigMap {{ item.metadata.name }} -n {{ _appmigration_namespace }} --export -o yaml > {{ tmpdir.path }}/{{ item.metadata.name }}-cm.yml
  with_items:
    - "{{ current_cms }}"
  when:
    - "'-sys-config' not in item.metadata.name"
    - "'-ca' not in item.metadata.name"
  register: saved_cms

- name: Lookup All RoleBindings 
  set_fact:
    current_rbs: "{{ lookup('k8s', api_versions='rbac.authorization.k8s.io/v1', kind='RoleBinding', namespace=_appmigration_namespace) }}"

- name: Save RoleBindings into temp dir
  shell: kubectl get RoleBinding {{ item.metadata.name }} -n {{ _appmigration_namespace }} -o yaml > {{ tmpdir.path }}/{{ item.metadata.name }}-rb.yml
  with_items:
    - "{{ current_rbs }}"
  when:
    - "'admin' not in item.metadata.name"
    - "'deployer' not in item.metadata.name"
    - "'builder' not in item.metadata.name"
  register: saved_rbs

- name: Lookup All Services 
  set_fact:
    current_svcs: "{{ lookup('k8s', api_versions='v1', kind='Service', namespace=_appmigration_namespace) }}"

- name: Save Services into temp dir
  shell: kubectl get Service {{ item.metadata.name }} -n {{ _appmigration_namespace }} --export -o yaml > {{ tmpdir.path }}/{{ item.metadata.name }}-svc.yml
  with_items:
    - "{{ current_svcs }}"
  when:
    - item.metadata.name and item.metadata.name is defined
  register: saved_svcs

- name: Lookup All Routes 
  set_fact:
    current_routes: "{{ lookup('k8s', api_versions='v1', kind='Route', namespace=_appmigration_namespace) }}"

- name: Print list of Routes
  debug:
    var: current_routes

- name: Save Routes into temp dir
  shell: kubectl get Route {{ item.metadata.name }} -n {{ _appmigration_namespace }} --export -o yaml > {{ tmpdir.path }}/{{ item.metadata.name }}-route.yml
  with_items:
    - "{{ current_routes }}"
  register: saved_routes

